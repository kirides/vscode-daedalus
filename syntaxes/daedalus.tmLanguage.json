{
    "scopeName": "source.daedalus",
    "patterns": [
        { "include": "#type-declarations" },
        { "include": "#func-def" },
        { "include": "#expression-simple" }
    ],
    "repository": {
        "constant-values": {
            "patterns": [
                { "include": "#strings" },
                { "include": "#constant-num" },
                { "include": "#constant-bool" },
                { "include": "#constant-lang" }
            ]
        },
        "expression": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#preprocessors" },
                { "include": "#constant-values" },
                { "include": "#if" },
                { "include": "#var-def-array" },
                { "include": "#var-def-lang" },
                { "include": "#var-def" },
                { "include": "#keyword" },
                { "include": "#functions" }
            ]
        },
        "expression-simple": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#preprocessors" },
                { "include": "#constant-values" },
                { "include": "#var-def-array" },
                { "include": "#var-def-lang" },
                { "include": "#var-def" },
                { "include": "#keyword" }
            ]
        },
        "preprocessors": {
            "match": "\\s*^#(?:DEFINE|UNDEF|IF(?:DEF|NDEF)?|ELIF|ENDIF|ELSE|INCLUDE)\\b",
            "name": "meta.preprocessor"
        },
        "constant-num": {
            "match": "(\\b\\d+\\.?\\d*|\\B\\.\\d+(?:\\s*,\\s*)*)+",
            "name": "constant.numeric"
        },
        "constant-bool": {
            "match": "(?i)TRUE|FALSE",
            "name": "constant.numeric"
        },
        "constant-lang": {
            "match": "(?i)\\b(?:null|self|hero|item|other|victim)\\b",
            "name": "constant.language"
        },
        "comment": {
            "match": "(?://.*$|/\\*.*?\\*/)",
            "name": "comment"
        },
        "comment-block": {
            "begin": "/\\*",
            "end": "\\*/",
            "name": "comment"
        },
        "keyword": {
            "match": "(?i)\\b(?:class|const|float|funcref|func|instance|int|prototype|return|repeat|string|this|var|void|while|continue|end|break)\\b",
            "name": "keyword.control"
        },
        "classes": {
            "match": "(?i)\\b(?:[\\w_]+)\\b",
            "name": "entity.name.class"
        },
        "strings": {
            "match": "\".*?\"|'.*?'",
            "name": "string"
        },
        "type-declarations": {
            "patterns": [
                { "include": "#instance-declaration-short" },
                { "include": "#instance-declaration" },
                { "include": "#class-declaration" }
            ]
        },
        "if": {
            "begin": "(?i)\\b(if)\\b",
            "end": "}\\s*;",
            "beginCaptures": {
                "0": { "name": "entity.statement.if" },
                "1": { "name": "keyword.control" }
            },
            "endCaptures": {
                "0": { "name": "entity.statement.endif" },
                "1": { "name": "keyword.control" }
            },
            "patterns": [
                { "include": "#else-if" },
                { "include": "#else" },
                { "include": "#expression" }
            ]
        },
        "else-if": {
            "begin": "(?i)\\b(else\\s+if)\\b",
            "end": "(?=(}))",
            "beginCaptures": {
                "0": { "name": "entity.statement.else-if" },
                "1": { "name": "keyword.control" }
            },
            "patterns": [
                { "include": "#else-if" },
                { "include": "#else" },
                { "include": "#expression" }
            ]
        },
        "else": {
            "begin": "(?i)\\b(else)\\b",
            "end": "(?=(}))",
            "beginCaptures": {
                "0": { "name": "entity.statement.else" },
                "1": { "name": "keyword.control" }
            },
            "patterns": [
                { "include": "#var-def-lang" },
                { "include": "#var-def" },
                { "include": "#expression" }
            ]
        },
        "class-declaration": {
            "begin": "(?i)(?<=class)\\s+([\\w_]+)(?:\\s*\\(([\\w+_]+)\\))?",
            "end": "}\\s*;",
            "beginCaptures": {
                "1": { "name": "entity.name.class" },
                "2": { "name": "entity.name.class" }
            },
            "patterns": [
                { "include": "#var-def-lang" },
                { "include": "#var-def" },
                { "include": "#comments" }
            ]
        },
        "instance-declaration": {
            "begin": "(?i)(?<=prototype|instance)\\s+([\\w@_]+)\\s*(?:\\(([\\w@_]+)\\))?",
            "end": "}\\s*;",
            "beginCaptures": {
                "1": { "name": "entity.name.class" },
                "2": { "name": "entity.name.class" },
                "3": { "name": "entity.name.class" }
            },
            "patterns": [{
                "include": "#expression"
            }]
        },
        "instance-declaration-short": {
            "begin": "(?i)(?<=prototype|instance)\\s+([\\w@_]+)\\s*(?:,\\s*([\\w@_]+))*\\s*(?:\\(([\\w@_]+)\\))?",
            "end": ";",
            "beginCaptures": {
                "1": { "name": "entity.name.class" },
                "2": { "name": "entity.name.class" },
                "3": { "name": "entity.name.class" }
            },
            "patterns": [{
                "include": "#expression"
            }]
        },
        "comments": {
            "patterns": [
                { "include": "#comment" },
                { "include": "#comment-block" }
            ]
        },
        "const-array-values": {
            "begin": "{",
            "end": "}",
            "patterns": [
                { "include": "#comment" },
                { "include": "#comment-block" },
                { "include": "#constant-values" },
                { "include": "#keyword" }
            ]
        },
        "var-def-array": {
            "begin": "(?i)(var|const)(?=\\s+(int|string)\\s+\\w+\\s*\\[\\d+\\]\\s*=\\s*{)",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.variable" },
                "1": { "name": "keyword.control" }
            },
            "end": ";",
            "patterns": [
                { "include": "#comment" },
                { "include": "#comment-block" },
                { "include": "#const-array-values" },
                { "include": "#constant-values" },
                { "include": "#keyword" }
            ]
        },
        "var-def-lang": {
            "begin": "(?i)(var|const)(?=\\s+(int|string)\\s+\\w+)",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.variable" },
                "1": { "name": "keyword.control" }
            },
            "end": ",|\\)|;",
            "patterns": [
                { "include": "#comment" },
                { "include": "#comment-block" },
                { "include": "#constant-values" },
                { "include": "#keyword" }
            ]
        },
        "var-def": {
            "begin": "(?i)(var|const)\\s+([\\w_]+)(?=\\s+[\\w_]+)",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.variable" },
                "1": { "name": "keyword.control" },
                "2": { "name": "entity.name.class" }
            },
            "end": ",|\\)|;",
            "patterns": [
                { "include": "#comment" },
                { "include": "#comment-block" },
                { "include": "#constant-values" },
                { "include": "#keyword" }
            ]
        },
        "func-def": {
            "begin": "(?i)\\b([Ff][Uu][Nn][Cc])\\s+(\\w+)(?=\\s+[\\w@^]+\\s*\\()",
            "end": "}\\s*;",
            "beginCaptures": {
                "0": { "name": "entity.function" },
                "1": { "name": "keyword" },
                "2": { "name": "keyword" }
            },
            "endCaptures": {
                "0": { "name": "entity.function.end" }
            },
            "name": "expression.definition.function",
            "patterns": [
                { "include": "#expression" }
            ]
        },
        "functions": {
            "match": "\\b(?:[\\w@^]+)\\s*(?=\\()",
            "name": "entity.name.function"
        }
    }
}